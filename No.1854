#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

typedef struct Node
{
	int next;
	int time;
	int prev;
} node;

typedef struct Heap
{
	int end;
} hip;

struct cmp
{
	bool operator()(node &a, node &b)
	{
		return a.time > b.time;
	}
};

struct cmp_hip
{
	bool operator()(hip &a, hip &b)
	{
		return a.end < b.end;
	}
};

vector <node> side[1100];
priority_queue <node, vector<node>, cmp> pq;
priority_queue <hip, vector<hip>, cmp_hip> epq[1100];

int n, m, k, a, b, c, dist[1100];
node now;

void Dijkstra()
{
	pq.push({1, 0});
	
	epq[1].push({0});
	
	while (!pq.empty())
	{
		now = pq.top();
		pq.pop();
		for (int i = 0; i < side[now.next].size(); i++)
		{
			node next = side[now.next][i];
			if (epq[next.next].size() < k)
			{
				dist[next.next] = now.prev + next.time;
				pq.push({next.next, dist[next.next], dist[next.next]});
				epq[next.next].push({dist[next.next]});
			}
			else if (now.prev + next.time < epq[next.next].top().end)
			{
				epq[next.next].pop();	
				dist[next.next] = now.prev + next.time;
				pq.push({next.next, dist[next.next], dist[next.next]});
				epq[next.next].push({dist[next.next]});
			}
		}
	}	
} 

int main(void)
{
	scanf("%d%d%d", &n, &m, &k);
	
	for (int i = 0; i < m; i++)
	{
		scanf("%d%d%d", &a, &b, &c);
		side[a].push_back({b, c});
	}
	
	Dijkstra();
	
	for (int i = 1; i <= n; i++)
	{
		if (epq[i].size() < k)
		{
			puts("-1");
		}
		else
		{
			printf("%d\n", epq[i].top());
		}	
	}
	
	return 0;
}
