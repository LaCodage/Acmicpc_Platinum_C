#include <stdio.h>
#include <algorithm>
#include <queue>
using namespace std;

typedef struct _pos
{
	int y;
	int x;
} pos;

typedef struct _node
{
	int y;
	int x;
	int num;
} node;

char map;
int R, C, N;
int dy[] = {0, 0, 1, -1};
int dx[] = {1, -1, 0, 0};
int area[1501][1501], parent[2250001];
pos swan1, swan2;
bool visit[1505][1501];

int find(int v)
{
	if (v == parent[v])
	{
		return v;
	}
	
	return parent[v] = find(parent[v]);
}

void merge(int v, int u)
{
	v = find(v);
	u = find(u);
	
	if (v == u)
	{
		return;
	}
	
	parent[v] = u;
}

void BFS(int y, int x, int n)
{
	queue <pos> q;
	q.push({y, x});
	visit[y][x] = true;
	area[y][x] = N;
	
	while (!q.empty())
	{
		pos now = q.front();
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			int yy = now.y + dy[i];
			int xx = now.x + dx[i];
			if (0 <= yy && yy < R && 0 <= xx && xx < C)
			{
				if (area[yy][xx] == 0 && visit[yy][xx] == false)
				{
					area[yy][xx] = N;
					q.push({yy, xx});
					visit[yy][xx] = true;
				}
			}
		}
	}
}

int solution()
{
	int day = 0;
	int sp1 = area[swan1.y][swan1.x];
	int sp2 = area[swan2.y][swan2.x];
	queue <node> q;
	
	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			if (area[i][j] != -1)
			{
				for (int d = 0; d < 4; d++)
				{
					int yy = i + dy[d];
					int xx = j + dx[d];
					if (0 <= yy && yy < R && 0 <= xx && xx < C)
					{
						if (visit[yy][xx] == false && area[yy][xx] == -1)
						{
							visit[yy][xx] = true;
							q.push({yy, xx, area[i][j]});
						}
					}
				}
			}
		}
	}
	
	
	while (!q.empty())
	{
		int size = q.size();
		day++;
		for (int i = 0; i < size; i++)
		{
			node now = q.front();
			q.pop();
			area[now.y][now.x] = now.num;
			for (int j = 0; j < 4; j++)
			{
				int yy = now.y + dy[j];
				int xx = now.x + dx[j];
				if (0 <= yy && yy < R && 0 <= xx && xx < C)
				{
					if (visit[yy][xx] == true)
					{
						if (area[yy][xx] == -1)
						{
							continue;
						}
						else
						{
							merge(now.num, area[yy][xx]);
						}
					}
					else
					{
						visit[yy][xx] = true;
						q.push({yy, xx, now.num});
					}
				}
			}
			if (find(sp1) == find(sp2))
			{
				return day;
			}
		}
	}
}

int main(void)
{
	int flag = 0;
	
	scanf("%d%d", &R, &C);
	
	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			scanf(" %c", &map);
			area[i][j] = -1;
			if (map == 'L')
			{
				area[i][j] = 0;
				if (flag == 0)
				{
					swan1 = {i, j};
				}
				else
				{
					swan2 = {i, j};
				}
				flag++;
			}
			else if (map == '.')
			{
				area[i][j] = 0;
			}
		}
	}
	
	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			if (visit[i][j] == false && area[i][j] == 0)
			{
				BFS(i, j, ++N);
			}
		}
	}
	
	for (int i = 1; i < N; i++)
	{
		parent[i] = i;
	}
	
	printf("%d", solution());
	
	return 0;
}
